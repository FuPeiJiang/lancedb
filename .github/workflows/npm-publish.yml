name: NPM Publish
on: [push]

jobs:
  node-linux:
    name: vectordb (${{ matrix.config.arch}}-unknown-linux-musl)
    runs-on: ${{ matrix.config.runner }}
    container: ${{ matrix.config.container }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - arch: x86_64
            runner: ubuntu-latest
            container: alpine:edge
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Dependencies and Build
        run: |
            apk add protobuf-dev curl clang mold grep npm bash
            curl --proto '=https' --tlsv1.3 -sSf https://raw.githubusercontent.com/rust-lang/rustup/refs/heads/master/rustup-init.sh | sh -s -- -y --default-toolchain 1.80.0
            source "$HOME/.cargo/env"
            rustup target add aarch64-unknown-linux-musl --toolchain 1.80.0
            crt=$(realpath $(dirname $(rustup which rustc))/../lib/rustlib/aarch64-unknown-linux-musl/lib/self-contained)
            sysroot_lib=/usr/aarch64-unknown-linux-musl/usr/lib
            apk_url=https://dl-cdn.alpinelinux.org/alpine/latest-stable/main/aarch64/
            curl -sSf $apk_url > apk_list
            gcc_apk=$(cat apk_list | grep -oP '(?<=")gcc-\d.*?(?=")')
            libgcc_apk=$(cat apk_list | grep -oP '(?<=")libgcc-\d.*?(?=")')
            musl_apk=$(cat apk_list | grep -oP '(?<=")musl-\d.*?(?=")')
            curl -sSf $apk_url$gcc_apk | tar zxf -
            curl -sSf $apk_url$libgcc_apk | tar zxf -
            curl -sSf $apk_url$musl_apk | tar zxf -
            mkdir -p $sysroot_lib
            echo 'GROUP ( libgcc_s.so.1 -lgcc )' > $sysroot_lib/libgcc_s.so
            cp usr/lib/libgcc_s.so.1 $sysroot_lib
            cp usr/lib/gcc/aarch64-alpine-linux-musl/*/libgcc.a $sysroot_lib
            cp lib/ld-musl-aarch64.so.1 $sysroot_lib/libc.so
            echo '!<arch>' > $sysroot_lib/libdl.a
            cp $crt/crti.o $sysroot_lib
            cp $crt/crtbeginS.o $sysroot_lib
            cp $crt/crtendS.o $sysroot_lib
            cp $crt/crtn.o $sysroot_lib
            CARGO_BUILD_TARGET=aarch64-unknown-linux-musl CC=clang RUSTFLAGS='-Ctarget-feature=-crt-static -Clinker=clang -Clink-arg=-fuse-ld=mold -Clink-arg=--target=aarch64-unknown-linux-musl -Clink-arg=--sysroot=/usr/aarch64-unknown-linux-musl -Clink-arg=-lc' bash ci/manylinux_node/build_vectordb.sh aarch64
      - name: Upload Linux Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: node-native-linux-${{ matrix.config.arch }}
          path: |
            node/dist/lancedb-vectordb-linux*.tgz